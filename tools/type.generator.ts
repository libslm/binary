import { writeFileSync, mkdirSync } from "fs";
import { join } from "path";

type GenerateName = string;
type GenerateSize = number;

const types: string[] = [];
const outputDirectory = "src/types/generated";

mkdirSync(outputDirectory, { recursive: true });

function skipped(name: GenerateName): void {
    const outputFile = join(outputDirectory, `${name.toLowerCase()}.d.ts`);
    const content = `// Auto-generated by tools/generate-types.ts on ${new Date().toISOString()}\nexport type ${name} = number;\n`;

    writeFileSync(outputFile, content.trimStart() + '\n');
    types.push(name);

    console.log(`⚠️  Generated ${name} (defualt to number)`);
}

function generate(name: GenerateName, size: GenerateSize): void {
    if (size > 0xFFFF) return skipped(name);

    const outputFile = join(outputDirectory, `${name.toLowerCase()}.d.ts`);
    const values = Array.from({ length: size + 1 }, (_, i) => i);
    const formattedValues = values.join(`|`);
    const content = `// Auto-generated by tools/generate-types.ts on ${new Date().toISOString()}\nexport type ${name} = ${formattedValues};\n`;

    writeFileSync(outputFile, content.trimStart() + '\n');
    types.push(name);

    console.log(`✔️  Generated ${name}`);
}

function generateIndex() {
    const indexFile = join(outputDirectory, "index.d.ts");
    const indexContent = "// Auto-generated index file\n" + types.map(t => `/// <reference path=\"./${t.toLowerCase()}.d.ts\" />\nexport type { ${t} } from "./${t.toLowerCase()}.d.js";`).join("\n");

    writeFileSync(indexFile, indexContent);
    console.log(`✔️  Generated index.d.ts`);
}

console.log(`\n🧩 Type Generator`);
console.log(`-----------------`);
console.log(`⚙️  Generating types...\n`);

generate('Bit', 0x1);
generate('Nibble', 0xF);
generate('Byte', 0xFF);
generate('Word', 0xFFFF);
generate('Dword', 0xFFFFFFFF);
generateIndex();

console.log(`\n-----------------`);
console.log(`✅ Finished generating all types!\n`);